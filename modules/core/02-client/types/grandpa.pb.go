// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/core/client/v1/grandpa.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the ibc client submodule's genesis state.
type GrandpaClientState struct {
	// client states with their corresponding identifiers
	RelayChain []byte `protobuf:"bytes,1,opt,name=relay_chain,json=relayChain,proto3" json:"relay_chain,omitempty" yaml:elay_chain`
	// consensus states from each client
	LatestRelayHeight uint32 `protobuf:"varint,2,opt,name=latest_relay_height,json=latestRelayHeight,proto3" json:"latest_relay_height,omitempty" yaml:"latest_relay_height"`
	// metadata from each client
	LatestRelayHash uint32         `protobuf:"varint,3,opt,name=latest_relay_hash,json=latestRelayHash,proto3" json:"latest_relay_hash,omitempty" yaml:"latest_relay_hash"`
	FrozenHeight    *GranpdaHeight `protobuf:"bytes,4,opt,name=frozen_height,json=frozenHeight,proto3" json:"frozen_height,omitempty" yaml:"frozen_height"`
	// create localhost on initialization
	LatestParaHeight   uint32      `protobuf:"varint,5,opt,name=latest_para_height,json=latestParaHeight,proto3" json:"latest_para_height,omitempty" yaml:"latest_para_height"`
	ParaId             uint32      `protobuf:"varint,6,opt,name=para_id,json=paraId,proto3" json:"para_id,omitempty" yaml:"para_id"`
	CurrentSetId       uint64      `protobuf:"varint,7,opt,name=current_set_id,json=currentSetId,proto3" json:"current_set_id,omitempty" yaml:"current_set_id"`
	CurrentAuthorities []Authority `protobuf:"bytes,8,rep,name=current_authorities,json=currentAuthorities,proto3" json:"current_authorities" yaml:"current_authorities"`
}

func (m *GrandpaClientState) Reset()         { *m = GrandpaClientState{} }
func (m *GrandpaClientState) String() string { return proto.CompactTextString(m) }
func (*GrandpaClientState) ProtoMessage()    {}
func (*GrandpaClientState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b40613ff6c21578, []int{0}
}
func (m *GrandpaClientState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrandpaClientState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrandpaClientState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GrandpaClientState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrandpaClientState.Merge(m, src)
}
func (m *GrandpaClientState) XXX_Size() int {
	return m.Size()
}
func (m *GrandpaClientState) XXX_DiscardUnknown() {
	xxx_messageInfo_GrandpaClientState.DiscardUnknown(m)
}

var xxx_messageInfo_GrandpaClientState proto.InternalMessageInfo

func (m *GrandpaClientState) GetRelayChain() []byte {
	if m != nil {
		return m.RelayChain
	}
	return nil
}

func (m *GrandpaClientState) GetLatestRelayHeight() uint32 {
	if m != nil {
		return m.LatestRelayHeight
	}
	return 0
}

func (m *GrandpaClientState) GetLatestRelayHash() uint32 {
	if m != nil {
		return m.LatestRelayHash
	}
	return 0
}

func (m *GrandpaClientState) GetFrozenHeight() *GranpdaHeight {
	if m != nil {
		return m.FrozenHeight
	}
	return nil
}

func (m *GrandpaClientState) GetLatestParaHeight() uint32 {
	if m != nil {
		return m.LatestParaHeight
	}
	return 0
}

func (m *GrandpaClientState) GetParaId() uint32 {
	if m != nil {
		return m.ParaId
	}
	return 0
}

func (m *GrandpaClientState) GetCurrentSetId() uint64 {
	if m != nil {
		return m.CurrentSetId
	}
	return 0
}

func (m *GrandpaClientState) GetCurrentAuthorities() []Authority {
	if m != nil {
		return m.CurrentAuthorities
	}
	return nil
}

type GranpdaHeight struct {
	RevisionNumber uint64 `protobuf:"varint,1,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty" yaml:evision_number`
	RevisionHeight uint64 `protobuf:"varint,2,opt,name=revision_height,json=revisionHeight,proto3" json:"revision_height,omitempty" yaml:evision_height`
}

func (m *GranpdaHeight) Reset()         { *m = GranpdaHeight{} }
func (m *GranpdaHeight) String() string { return proto.CompactTextString(m) }
func (*GranpdaHeight) ProtoMessage()    {}
func (*GranpdaHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b40613ff6c21578, []int{1}
}
func (m *GranpdaHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GranpdaHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GranpdaHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GranpdaHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GranpdaHeight.Merge(m, src)
}
func (m *GranpdaHeight) XXX_Size() int {
	return m.Size()
}
func (m *GranpdaHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_GranpdaHeight.DiscardUnknown(m)
}

var xxx_messageInfo_GranpdaHeight proto.InternalMessageInfo

func (m *GranpdaHeight) GetRevisionNumber() uint64 {
	if m != nil {
		return m.RevisionNumber
	}
	return 0
}

func (m *GranpdaHeight) GetRevisionHeight() uint64 {
	if m != nil {
		return m.RevisionHeight
	}
	return 0
}

type Authority struct {
	AuthorityId     uint32 `protobuf:"varint,1,opt,name=authority_id,json=authorityId,proto3" json:"authority_id,omitempty" yaml:uthority_id`
	AuthorityWeight uint64 `protobuf:"varint,2,opt,name=authority_weight,json=authorityWeight,proto3" json:"authority_weight,omitempty" yaml:uthority_weight`
}

func (m *Authority) Reset()         { *m = Authority{} }
func (m *Authority) String() string { return proto.CompactTextString(m) }
func (*Authority) ProtoMessage()    {}
func (*Authority) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b40613ff6c21578, []int{2}
}
func (m *Authority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Authority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Authority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authority.Merge(m, src)
}
func (m *Authority) XXX_Size() int {
	return m.Size()
}
func (m *Authority) XXX_DiscardUnknown() {
	xxx_messageInfo_Authority.DiscardUnknown(m)
}

var xxx_messageInfo_Authority proto.InternalMessageInfo

func (m *Authority) GetAuthorityId() uint32 {
	if m != nil {
		return m.AuthorityId
	}
	return 0
}

func (m *Authority) GetAuthorityWeight() uint64 {
	if m != nil {
		return m.AuthorityWeight
	}
	return 0
}

func init() {
	proto.RegisterType((*GrandpaClientState)(nil), "ibc.core.client.v1.GrandpaClientState")
	proto.RegisterType((*GranpdaHeight)(nil), "ibc.core.client.v1.GranpdaHeight")
	proto.RegisterType((*Authority)(nil), "ibc.core.client.v1.Authority")
}

func init() { proto.RegisterFile("ibc/core/client/v1/grandpa.proto", fileDescriptor_3b40613ff6c21578) }

var fileDescriptor_3b40613ff6c21578 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x18, 0x6d, 0x58, 0x59, 0xc1, 0x6d, 0xf7, 0xc3, 0xdb, 0xa4, 0x6c, 0x62, 0x49, 0xc8, 0xa9, 0x12,
	0x5a, 0xc2, 0x86, 0x10, 0x13, 0x17, 0xb4, 0x0e, 0x89, 0x4d, 0x48, 0x13, 0xf2, 0x0e, 0x48, 0x5c,
	0x8a, 0x93, 0x98, 0xc4, 0x52, 0x1b, 0x57, 0x8e, 0x5b, 0x54, 0xfe, 0x05, 0x2e, 0x5c, 0xf8, 0x9f,
	0x76, 0xdc, 0x91, 0x53, 0x84, 0xda, 0xff, 0x20, 0x07, 0xce, 0x28, 0x76, 0xda, 0x26, 0x90, 0xdb,
	0x97, 0xf7, 0xbd, 0xf7, 0xfc, 0xf2, 0x7d, 0x4e, 0x80, 0x45, 0x3d, 0xdf, 0xf5, 0x19, 0x27, 0xae,
	0x3f, 0xa4, 0x24, 0x16, 0xee, 0xf4, 0xd4, 0x0d, 0x39, 0x8e, 0x83, 0x31, 0x76, 0xc6, 0x9c, 0x09,
	0x06, 0x21, 0xf5, 0x7c, 0x27, 0x67, 0x38, 0x8a, 0xe1, 0x4c, 0x4f, 0x8f, 0xcc, 0x1a, 0x55, 0xd1,
	0x95, 0xa2, 0xa3, 0xfd, 0x90, 0x85, 0x4c, 0x96, 0x6e, 0x5e, 0x29, 0xd4, 0xfe, 0xd3, 0x04, 0xf0,
	0x9d, 0x32, 0xbf, 0x94, 0xec, 0x5b, 0x81, 0x05, 0x81, 0x2f, 0x41, 0x9b, 0x93, 0x21, 0x9e, 0x0d,
	0xfc, 0x08, 0xd3, 0x58, 0xd7, 0x2c, 0xad, 0xd7, 0xe9, 0xef, 0x67, 0xa9, 0xb9, 0x33, 0xc3, 0xa3,
	0xe1, 0xeb, 0xee, 0xba, 0x87, 0x80, 0x24, 0x5e, 0xe6, 0x35, 0xbc, 0x01, 0x7b, 0x43, 0x2c, 0x48,
	0x22, 0x06, 0x4a, 0x1d, 0x11, 0x1a, 0x46, 0x42, 0x7f, 0x60, 0x69, 0xbd, 0x6e, 0xdf, 0xc8, 0x52,
	0xf3, 0x48, 0xca, 0xed, 0x1a, 0x92, 0x8d, 0x76, 0x15, 0x8a, 0x72, 0xf0, 0x4a, 0x62, 0xf0, 0x0a,
	0xec, 0x56, 0xa9, 0x38, 0x89, 0xf4, 0x0d, 0xe9, 0xf6, 0x24, 0x4b, 0x4d, 0xbd, 0xce, 0x0d, 0x27,
	0x91, 0x8d, 0xb6, 0xcb, 0x5e, 0x38, 0x89, 0xe0, 0x67, 0xd0, 0xfd, 0xc2, 0xd9, 0x37, 0x12, 0x2f,
	0x33, 0x35, 0x2d, 0xad, 0xd7, 0x3e, 0x7b, 0xea, 0xfc, 0x3f, 0x4a, 0x27, 0x9f, 0xc7, 0x38, 0xc0,
	0x2a, 0x43, 0x5f, 0xcf, 0x52, 0x73, 0x5f, 0x1d, 0x54, 0x71, 0xb0, 0x51, 0x47, 0x3d, 0x17, 0x59,
	0xdf, 0x03, 0x58, 0x04, 0x19, 0x63, 0x8e, 0x97, 0xc7, 0x3c, 0x94, 0x61, 0x8f, 0xb3, 0xd4, 0x3c,
	0xac, 0x84, 0x2d, 0x71, 0x6c, 0xb4, 0xa3, 0xc0, 0x0f, 0x98, 0x17, 0x87, 0xc2, 0x67, 0xa0, 0x25,
	0x19, 0x34, 0xd0, 0x37, 0xa5, 0x03, 0xcc, 0x52, 0x73, 0x4b, 0x39, 0x14, 0x0d, 0x1b, 0x6d, 0xe6,
	0xd5, 0x75, 0x00, 0xdf, 0x80, 0x2d, 0x7f, 0xc2, 0x39, 0x89, 0xc5, 0x20, 0x21, 0x22, 0xd7, 0xb4,
	0x2c, 0xad, 0xd7, 0xec, 0x1f, 0x66, 0xa9, 0x79, 0xa0, 0x34, 0xd5, 0xbe, 0x8d, 0x3a, 0x05, 0x70,
	0x4b, 0xc4, 0x75, 0x00, 0x39, 0xd8, 0x5b, 0x12, 0xf0, 0x44, 0x44, 0x8c, 0x53, 0x41, 0x49, 0xa2,
	0x3f, 0xb2, 0x36, 0x7a, 0xed, 0xb3, 0xe3, 0xba, 0x11, 0x5d, 0x14, 0xb4, 0x59, 0xdf, 0xbe, 0x4b,
	0xcd, 0xc6, 0x7a, 0xb3, 0x35, 0x3e, 0x36, 0x82, 0x05, 0x7a, 0x51, 0x02, 0x7f, 0x6a, 0xa0, 0x5b,
	0x19, 0x34, 0xbc, 0x00, 0xdb, 0x9c, 0x4c, 0x69, 0x42, 0x59, 0x3c, 0x88, 0x27, 0x23, 0x8f, 0x70,
	0x79, 0xef, 0x9a, 0xa5, 0x0d, 0x74, 0xab, 0x7d, 0xb4, 0xb5, 0x14, 0xdc, 0xc8, 0xe7, 0x8a, 0x45,
	0xe9, 0xee, 0xd5, 0x5a, 0xa8, 0xfe, 0xda, 0x42, 0xa5, 0xb0, 0xbf, 0x6b, 0xe0, 0xf1, 0xea, 0xed,
	0xe0, 0x39, 0xe8, 0x2c, 0xdf, 0x64, 0x96, 0x0f, 0x56, 0x93, 0xcb, 0x38, 0xc8, 0x52, 0x73, 0x57,
	0xba, 0xb5, 0x4a, 0x4d, 0xd4, 0x5e, 0x51, 0xaf, 0x03, 0xf8, 0x16, 0xec, 0xac, 0x95, 0x5f, 0xcb,
	0x59, 0xd6, 0x6b, 0x69, 0xfd, 0x43, 0x40, 0xdb, 0x2b, 0xc9, 0x47, 0x75, 0xf9, 0xd0, 0xdd, 0xdc,
	0xd0, 0xee, 0xe7, 0x86, 0xf6, 0x7b, 0x6e, 0x68, 0x3f, 0x16, 0x46, 0xe3, 0x7e, 0x61, 0x34, 0x7e,
	0x2d, 0x8c, 0xc6, 0xa7, 0xf3, 0x90, 0x8a, 0x68, 0xe2, 0x39, 0x3e, 0x1b, 0xb9, 0x3e, 0x4b, 0x46,
	0x2c, 0x71, 0xa9, 0xe7, 0x9f, 0x84, 0xcc, 0x9d, 0xbe, 0x72, 0x47, 0x2c, 0x98, 0x0c, 0x49, 0xa2,
	0xfe, 0x07, 0xcf, 0xcf, 0x4e, 0x8a, 0x5f, 0x82, 0x98, 0x8d, 0x49, 0xe2, 0x6d, 0xca, 0x2f, 0xff,
	0xc5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x7b, 0x74, 0x02, 0x68, 0x04, 0x00, 0x00,
}

func (m *GrandpaClientState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrandpaClientState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GrandpaClientState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentAuthorities) > 0 {
		for iNdEx := len(m.CurrentAuthorities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentAuthorities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrandpa(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.CurrentSetId != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.CurrentSetId))
		i--
		dAtA[i] = 0x38
	}
	if m.ParaId != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.ParaId))
		i--
		dAtA[i] = 0x30
	}
	if m.LatestParaHeight != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.LatestParaHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.FrozenHeight != nil {
		{
			size, err := m.FrozenHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrandpa(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LatestRelayHash != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.LatestRelayHash))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestRelayHeight != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.LatestRelayHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RelayChain) > 0 {
		i -= len(m.RelayChain)
		copy(dAtA[i:], m.RelayChain)
		i = encodeVarintGrandpa(dAtA, i, uint64(len(m.RelayChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GranpdaHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GranpdaHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GranpdaHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevisionHeight != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.RevisionHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.RevisionNumber != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.RevisionNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Authority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authority) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Authority) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorityWeight != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.AuthorityWeight))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthorityId != 0 {
		i = encodeVarintGrandpa(dAtA, i, uint64(m.AuthorityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGrandpa(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrandpa(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GrandpaClientState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RelayChain)
	if l > 0 {
		n += 1 + l + sovGrandpa(uint64(l))
	}
	if m.LatestRelayHeight != 0 {
		n += 1 + sovGrandpa(uint64(m.LatestRelayHeight))
	}
	if m.LatestRelayHash != 0 {
		n += 1 + sovGrandpa(uint64(m.LatestRelayHash))
	}
	if m.FrozenHeight != nil {
		l = m.FrozenHeight.Size()
		n += 1 + l + sovGrandpa(uint64(l))
	}
	if m.LatestParaHeight != 0 {
		n += 1 + sovGrandpa(uint64(m.LatestParaHeight))
	}
	if m.ParaId != 0 {
		n += 1 + sovGrandpa(uint64(m.ParaId))
	}
	if m.CurrentSetId != 0 {
		n += 1 + sovGrandpa(uint64(m.CurrentSetId))
	}
	if len(m.CurrentAuthorities) > 0 {
		for _, e := range m.CurrentAuthorities {
			l = e.Size()
			n += 1 + l + sovGrandpa(uint64(l))
		}
	}
	return n
}

func (m *GranpdaHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevisionNumber != 0 {
		n += 1 + sovGrandpa(uint64(m.RevisionNumber))
	}
	if m.RevisionHeight != 0 {
		n += 1 + sovGrandpa(uint64(m.RevisionHeight))
	}
	return n
}

func (m *Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorityId != 0 {
		n += 1 + sovGrandpa(uint64(m.AuthorityId))
	}
	if m.AuthorityWeight != 0 {
		n += 1 + sovGrandpa(uint64(m.AuthorityWeight))
	}
	return n
}

func sovGrandpa(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrandpa(x uint64) (n int) {
	return sovGrandpa(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GrandpaClientState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrandpa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrandpaClientState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrandpaClientState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayChain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrandpa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGrandpa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayChain = append(m.RelayChain[:0], dAtA[iNdEx:postIndex]...)
			if m.RelayChain == nil {
				m.RelayChain = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRelayHeight", wireType)
			}
			m.LatestRelayHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestRelayHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestRelayHash", wireType)
			}
			m.LatestRelayHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestRelayHash |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrozenHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrandpa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrandpa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FrozenHeight == nil {
				m.FrozenHeight = &GranpdaHeight{}
			}
			if err := m.FrozenHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestParaHeight", wireType)
			}
			m.LatestParaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestParaHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParaId", wireType)
			}
			m.ParaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParaId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSetId", wireType)
			}
			m.CurrentSetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAuthorities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrandpa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrandpa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentAuthorities = append(m.CurrentAuthorities, Authority{})
			if err := m.CurrentAuthorities[len(m.CurrentAuthorities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrandpa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrandpa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GranpdaHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrandpa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GranpdaHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GranpdaHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionNumber", wireType)
			}
			m.RevisionNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevisionNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionHeight", wireType)
			}
			m.RevisionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevisionHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGrandpa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrandpa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrandpa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Authority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Authority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityId", wireType)
			}
			m.AuthorityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorityId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityWeight", wireType)
			}
			m.AuthorityWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthorityWeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGrandpa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrandpa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrandpa(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrandpa
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrandpa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrandpa
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGrandpa
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGrandpa
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGrandpa        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrandpa          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGrandpa = fmt.Errorf("proto: unexpected end of group")
)
